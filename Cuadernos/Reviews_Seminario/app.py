import streamlit as st
import pandas as pd
import pickle
import re
import unicodedata

# ---------- CARGAR MODELO Y VECTORIZADOR ----------
try:
    with open("vectorizador.pkl", "rb") as f:
        vectorizador = pickle.load(f)

    with open("modelo_naive_bayes.pkl", "rb") as f:
        modelo = pickle.load(f)
except FileNotFoundError:
    st.error("‚ùå No se encontraron los archivos 'vectorizador.pkl' o 'modelo_naive_bayes.pkl'. Aseg√∫rate de que est√©n en la misma carpeta que este archivo app.py.")
    st.stop()

# ---------- FUNCIONES ----------
def limpiar_texto(texto):
    texto = texto.lower()
    texto = unicodedata.normalize("NFKD", texto).encode("ascii", "ignore").decode("utf-8")
    texto = re.sub(r"http\S+|www\S+|https\S+", "", texto)
    texto = re.sub(r"\W", " ", texto)
    texto = re.sub(r"\s+", " ", texto)
    return texto.strip()

def predecir_sentimiento(texto):
    texto_limpio = limpiar_texto(texto)
    vector = vectorizador.transform([texto_limpio])
    pred = modelo.predict(vector)[0]
    return pred

# ---------- INTERFAZ ----------
st.set_page_config(page_title="An√°lisis de Rese√±as", layout="wide")
st.title("üìä Dashboard de Sentimiento de Rese√±as")
st.markdown("Este sistema analiza autom√°ticamente rese√±as cargadas desde un archivo `.csv` y detecta si son **positivas** o **negativas**.")

# ---------- CARGA DE ARCHIVO ----------
archivo = st.file_uploader("üìÇ Sube un archivo .csv con una columna de rese√±as", type=["csv"])

if archivo is not None:
    try:
        df = pd.read_csv(archivo)

        # Selecci√≥n de columna
        columnas = df.columns.tolist()
        col_resena = st.selectbox("Selecciona la columna que contiene las rese√±as:", columnas)

        if st.button("üîç Analizar rese√±as"):
            df["rese√±a_limpia"] = df[col_resena].astype(str).apply(limpiar_texto)
            vectores = vectorizador.transform(df["rese√±a_limpia"])
            predicciones = modelo.predict(vectores)

            df["Predicci√≥n"] = predicciones
            df["Sentimiento"] = df["Predicci√≥n"].apply(lambda x: "‚úÖ Positiva" if x == 1 else "‚ö†Ô∏è Negativa")

            st.success("‚úÖ An√°lisis completado")
            st.dataframe(df[[col_resena, "Sentimiento"]], use_container_width=True)

            # M√©tricas
            total = len(df)
            positivas = sum(df["Predicci√≥n"] == 1)
            negativas = sum(df["Predicci√≥n"] == 0)

            st.markdown("### üìà Resumen del An√°lisis")
            col1, col2, col3 = st.columns(3)
            col1.metric("Total de Rese√±as", total)
            col2.metric("Positivas", positivas)
            col3.metric("Negativas", negativas)

            # Descarga
            csv_resultado = df[[col_resena, "Sentimiento"]].to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar resultados como CSV", data=csv_resultado, file_name="resultados_rese√±as.csv", mime="text/csv")

    except Exception as e:
        st.error(f"‚ùå Error al procesar el archivo: {e}")
